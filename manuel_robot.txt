
#-----------------------------#
# pour controler l'affichage: #
#---------------------------- #

		

	activer/desactiver l'affichage des informations du robot, de l'obstacle et l'arene
	sur le terminal:

		setOptionPrintRobot(affiche)
		setOptionPrintObstacle(affiche)
		setOptionPrintArene(affiche)
		
		affiche = True, on affiche ces informations à chaque appel de printRobot
		affiche = False, on ne les affiche pas
		(par defaut, lors de la creation du robot, affiche = True)

		ex: 
		rob.setOptionPrintRobot(False)
			la fonction printRobot n'affichera rien meme si on l'appelle 
		arene.setOptionPrintArene(True)
			on affichera les informations de l'arene lorqu'on fera appel à sa fonction print
		obstacle.setOptionPrintObstacle(False)
			on ne fait pas d'affichage concernant les obstacles


	activer/desactiver l'affichage pour une arene et tous ses robots et obstacles:

		setOptionPrint(afficheA,afficheR,afficheO)
		
		combinaison des trois fonctions precedentes:
			- afficheA -> arene
			- afficheR -> tous les robots de cette arene
			- afficheO -> tous les obstacles de cette arene

		ex:
		arene.setOptionPrint(False,True,False)
			affiche uniquement les informations sur le robot
			rien ne s'affichera sur les obstacles et l'arene 


#-------------------------------------------------------------------------------

#-----------------------#
# pour la classe Robot: #
#---------------------- #

#----------------------------------creer--------------------------------------

	creer un robot rob:
		Robot(nom,posx,posy,angle,vitesse)
		
		String x float x float x float x float -> Robot
		- nom du Robot
		- position de depart: posx et posy
		- angle du vecteur vitesse (en degre)
		- vitesse de depart (nulle par defaut)
		
		ex:
		rob = Robot("robert",0.2,1.6,90,2)


#---------------------------------fonctions-------------------------------------

	faire avancer le robot:
		move(dt)

		float ->
		- fait avancer le robot pour un pas de temps dt

		ex:
		rob.move(0.1)
		sur un pas de temps 0.1 si sa vitesse est de 2, il a avance de 0.2



	faire tourner le robot:
		turn(ang)
		
		float ->
		- fait tourner le robot d'un angle ang
		il tournera vers sa gauche si cet angle est positif, vers sa droite 
		s'il est negatif

		ex:
		rob.turn(-45)
		a fait tourner le robot d'un angle de 45 degre vers sa droite 



	faire accelerer le robot:
		accelerate(acc,dt)
	
		float ->
		- fait accelerer (modifie le vecteur vitesse) d'un facteur acc*dt
		- dt est le pas de temps

		ex:
		rob.accelerate(2,1)
		la vitesse passera de 2 à 4 (acc*dt = 2*1)

	
	calculer la distance entre le robot et l'obstacle le plus proche se trouvant
	sur sa trajectoire:
		distanceRobotObs(arene)

		Arene -> float		
		- l'arene crée doit contenir une liste d'obstacles 
		si la fonction renvoie une valeure egale à -1 alors aucune obstacle ne se
		trouve sur sa trajectoire


#---------------------------------affichage-------------------------------------

	afficher les informations du robot sur le terminal:
		printRobot()
		
		ex: 
		rob.printRobot()
			affichera
			---------------------------------------------------------
			 nom du Robot:  Rob
			 position = [ 0.2 , 1.6 ]
			 vitesse =  2
			 direction de la vitesse(°) =  90
			---------------------------------------------------------
	

#-------------------------------------------------------------------------------	


#-----------------------#
# pour la classe Arene: #
#---------------------- #

#----------------------------------creer--------------------------------------
	creer une arene arena:
		Robot(nom,posx,posy,angle,vitesse)
		
		String x float x float x float x float -> Robot
		- nom du Robot
		- position de depart: posx et posy
		- angle du vecteur vitesse (en degre)
		- vitesse de depart (nulle par defaut)
		
		ex:
		arena = Robot("robert",0.2,1.6,90,2)




#---------------------------------affichage-------------------------------------

	afficher les informations de l'arene sur le terminal:
		printAll()
		
		ex: 
		arene.printRobot()

	

#-------------------------------------------------------------------------------

	
		


			
